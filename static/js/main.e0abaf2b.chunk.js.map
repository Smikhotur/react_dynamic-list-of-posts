{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/posts.js","index.js"],"names":["PostsList","React","memo","filterPosts","selectUserId","userId","className","length","map","post","key","id","title","type","onClick","propTypes","PropTypes","arrayOf","shape","number","isRequired","string","func","NewCommentForm","loadComments","useState","name","email","body","newComment","setNewComment","handleChange","target","value","onSubmit","event","preventDefault","placeholder","onChange","required","Loader","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","addPostComment","method","JSON","stringify","PostDetails","comments","setComments","visible","setVisible","useEffect","coment","deleteComment","deletePostComment","comment","App","users","setUsers","user","setUser","userSelect","setUserSelect","posts","setPosts","setFilterPosts","setUserId","people","filter","person","sort","a","b","useCallback","numberID","ReactDOM","render","document","getElementById"],"mappings":"8XAIaA,EAAYC,IAAMC,MAC7B,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,OAA9B,OACE,yBAAKC,UAAU,aACb,6CAAeH,EAAYI,SAE3B,wBAAID,UAAU,mBACXH,EAAYK,KAAI,SAAAC,GAAI,OACnB,wBACEH,UAAU,kBACVI,IAAKD,EAAKE,IAEV,6BACE,4CACaF,EAAKJ,OADlB,KAEG,KAEFI,EAAKG,OAER,4BACEC,KAAK,SACLP,UAAU,2BACVQ,QAAS,WACPV,EAAaK,EAAKE,KAAON,EAAS,EAAII,EAAKE,GAAIF,KAG/CJ,IAAWI,EAAKE,GAAM,QAAU,iBAShDX,EAAUe,UAAY,CACpBZ,YAAaa,IAAUC,QAAQD,IAAUE,MAAM,CAC7CP,GAAIK,IAAUG,OAAOC,WACrBR,MAAOI,IAAUK,QAAU,KAAKD,WAChCf,OAAQW,IAAUG,OAAOC,cACvBA,WACJhB,aAAcY,IAAUM,KAAKF,WAC7Bf,OAAQW,IAAUG,OAAOC,Y,kBCzCdG,G,MAAiBtB,IAAMC,MAClC,YAAuB,IAApBsB,EAAmB,EAAnBA,aAAmB,EACgBC,mBAAS,CAC3CC,KAAM,GAAIC,MAAO,GAAIC,KAAM,KAFT,mBACbC,EADa,KACDC,EADC,KAKdC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdN,EAAgBM,EAAhBN,KAAMO,EAAUD,EAAVC,MAEdH,EAAc,2BACTD,GADQ,kBAEVH,EAAOO,MAcZ,OACE,0BACEC,SAZiB,SAACC,GACpBA,EAAMC,iBACNZ,EAAaK,GACbC,EAAc,CACZJ,KAAM,GACNC,MAAO,GACPC,KAAM,MAONtB,UAAU,kBAEV,yBAAKA,UAAU,cACb,2BACEO,KAAK,OACLa,KAAK,OACLW,YAAY,YACZ/B,UAAU,wBACV2B,MAAOJ,EAAWH,KAClBY,SAAUP,EACVQ,UAAQ,KAIZ,yBAAKjC,UAAU,cACb,2BACEO,KAAK,QACLa,KAAK,QACLW,YAAY,aACZ/B,UAAU,wBACV2B,MAAOJ,EAAWF,MAClBW,SAAUP,EACVQ,UAAQ,KAIZ,yBAAKjC,UAAU,cACb,8BACEoB,KAAK,OACLW,YAAY,oBACZ/B,UAAU,wBACV2B,MAAOJ,EAAWD,KAClBU,SAAUP,EACVQ,UAAQ,KAIZ,4BACE1B,KAAK,SACLP,UAAU,wCAFZ,sBClEKkC,G,YAAS,kBACpB,yBAAKlC,UAAU,UACb,yBAAKA,UAAU,uBCLNmC,EAAW,iCAEXC,EAAU,SAACC,EAAKC,GAAN,OAAkBC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,GAAOC,GACjEE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAEjBN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,SCRZC,EAAkB,SAAAC,GAAM,OAAId,EAAQ,oBAAD,OAAqBc,KASxDC,EAAiB,SAAC,GAAD,IAPhBd,EAAKW,EAQjBjD,EAD4B,EAC5BA,OACAqB,EAF4B,EAE5BA,KACAC,EAH4B,EAG5BA,MACAC,EAJ4B,EAI5BA,KAJ4B,OAPhBe,EAYH,YAZQW,EAYK,CACtBE,OAAQnD,EACRqB,OACAC,QACAC,QAhB0BiB,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,GAAO,CACrDe,OAAQ,OACR9B,KAAM+B,KAAKC,UAAUN,KAEpBR,MAAK,SAAAC,GAAQ,OAAIA,EAASK,UAC1BN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,SCEZO,EAAc,SAAC,GAAsB,IAApBxD,EAAmB,EAAnBA,OAAQI,EAAW,EAAXA,KAAW,EACfgB,mBAAS,IADM,mBACxCqC,EADwC,KAC9BC,EAD8B,OAEjBtC,oBAAS,GAFQ,mBAExCuC,EAFwC,KAE/BC,EAF+B,KAI/CC,qBAAU,WACRX,EAAgBlD,GACbyC,MAAK,SAACqB,GACLJ,EAAYI,QAEf,CAAC9D,IAEJ,IAQM+D,EAAgB,SAACZ,IDPQ,SAAAA,GAAM,OAAIX,MAAM,GAAD,OAC3CJ,EAD2C,qBACtBe,GAAU,CAChCE,OAAQ,WAGTZ,MAAK,SAAAC,GAAQ,OAAIA,EAASK,UAC1BN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,SCErBe,CAAkBb,GACfV,MAAK,kBAAMS,EAAgBlD,MAC3ByC,KAAKiB,IAGV,OACE,yBAAKzD,UAAU,eACXG,EAGA,oCACE,6CAEA,6BAASH,UAAU,qBACjB,2BAAIG,EAAKG,QAGX,6BAASN,UAAU,yBACjB,4BACEO,KAAK,SACLP,UAAU,6BACVQ,QAAS,WACPmD,GAAYD,KAJhB,eAOWF,EAASvD,OAPpB,cASCyD,GACD,wBAAI1D,UAAU,qBACXwD,GAAYA,EAAStD,KAAI,SAAA8D,GAAO,OAC/B,wBAAI5D,IAAK4D,EAAQ3D,GAAIL,UAAU,0BAC7B,4BACEQ,QAAS,WACPsD,EAAcE,EAAQ3D,KAExBE,KAAK,SACLP,UAAU,qCALZ,KASA,2BAAIgE,EAAQ1C,YAMpB,iCACE,yBAAKtB,UAAU,6BACb,kBAAC,EAAD,CACEkB,aA1DO,SAACK,GACpB4B,EAAe,aACbpD,UAAWwB,IAEViB,MAAK,kBAAMS,EAAgBlD,MAC3ByC,KAAKiB,SAYJ,kBAAC,EAAD,QC/BKQ,EAAM,WAAO,IAAD,EACG9C,mBAAS,IADZ,mBAChB+C,EADgB,KACTC,EADS,OAEChD,mBAAS,IAFV,mBAEhBiD,EAFgB,KAEVC,EAFU,OAGalD,mBAAS,KAHtB,mBAGhBmD,EAHgB,KAGJC,EAHI,OAIGpD,mBAAS,IAJZ,mBAIhBqD,EAJgB,KAITC,EAJS,OAKetD,mBAASqD,GALxB,mBAKhB3E,EALgB,KAKH6E,EALG,OAMKvD,mBAAS,GANd,mBAMhBpB,EANgB,KAMR4E,EANQ,KAQvBf,qBAAU,WHJkBxB,EAAQ,UGM/BI,MAAK,SAACoC,GACLT,EAASS,EACNC,QAAO,SAAAC,GAAM,OAAIA,EAAOzE,GAAK,MAC7B0E,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3E,GAAK4E,EAAE5E,UCnBF+B,EAAQ,UDuBlCI,MAAK,SAACrC,GACLsE,EAAStE,GACTuE,EAAevE,QAElB,IAEH,IAAML,EAAeoF,uBAAY,SAACC,EAAUL,GAC1CH,EAAUQ,GACVd,EAAQS,KACP,IAYH,OACE,yBAAK9E,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVoB,KAAK,OACLO,MAAO2C,EACPtC,SAAU,YAAiB,IApBdnB,EAoBAa,EAAa,EAAbA,OACX6C,EAAc7C,EAAOC,OArBVd,EAsBGa,EAAOC,MAf/B+C,EANe,MAAX7D,EAMW2D,EAAMK,QAAO,SAAA1E,GAAI,OAAKA,EAAKJ,UAAYc,KALrC2D,EAAMtE,KAAI,SAAAC,GAAI,OAAIA,QAuB3B,4BAAQwB,MAAM,KAAd,aACCuC,EAAMhE,KAAI,SAAA4E,GAAM,OACf,4BACE1E,IAAK0E,EAAOzE,GACZsB,MAAOmD,EAAOzE,IAEbyE,EAAO1D,YAQlB,0BAAMpB,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,YAAaA,EACbC,aAAcA,EACdC,OAAQA,KAGA,IAAXA,GACD,yBAAKC,UAAU,gBACb,kBAAC,EAAD,CACED,OAAQA,EACRI,KAAMiE,QElFlBgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e0abaf2b.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = React.memo(\n  ({ filterPosts, selectUserId, userId }) => (\n    <div className=\"PostsList\">\n      <h2>{`Posts: ${filterPosts.length}`}</h2>\n\n      <ul className=\"PostsList__list\">\n        {filterPosts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User: ${post.userId}]`}\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectUserId(post.id === userId ? 0 : post.id, post);\n              }}\n            >\n              {(userId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  ),\n);\n\nPostsList.propTypes = {\n  filterPosts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string || null.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  selectUserId: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = React.memo(\n  ({ loadComments }) => {\n    const [newComment, setNewComment] = useState({\n      name: '', email: '', body: '',\n    });\n\n    const handleChange = ({ target }) => {\n      const { name, value } = target;\n\n      setNewComment({\n        ...newComment,\n        [name]: value,\n      });\n    };\n\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      loadComments(newComment);\n      setNewComment({\n        name: '',\n        email: '',\n        body: '',\n      });\n    };\n\n    return (\n      <form\n        onSubmit={handleSubmit}\n        className=\"NewCommentForm\"\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={newComment.name}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={newComment.email}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={newComment.body}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  },\n);\n\nNewCommentForm.propTypes = {\n  loadComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getUsers = () => request(`/users`);\n","import { request, BASE_URL } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nconst post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const addPostComment = ({\n  userId,\n  name,\n  email,\n  body,\n}) => post('/comments', {\n  postId: userId,\n  name,\n  email,\n  body,\n});\n\nexport const deletePostComment = postId => fetch(\n  `${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  },\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader/Loader';\nimport {\n  getPostComments,\n  deletePostComment,\n  addPostComment,\n} from '../../api/comments';\n\nexport const PostDetails = ({ userId, post }) => {\n  const [comments, setComments] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    getPostComments(userId)\n      .then((coment) => {\n        setComments(coment);\n      });\n  }, [userId]);\n\n  const loadComments = (newComment) => {\n    addPostComment({\n      userId, ...newComment,\n    })\n      .then(() => getPostComments(userId))\n      .then(setComments);\n  };\n\n  const deleteComment = (postId) => {\n    deletePostComment(postId)\n      .then(() => getPostComments(userId))\n      .then(setComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {!post ? (\n        <Loader />\n      ) : (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button PostDetails__button\"\n              onClick={() => {\n                setVisible(!visible);\n              }}\n            >\n              {`Hide ${comments.length} comments`}\n            </button>\n            {visible && (\n            <ul className=\"PostDetails__list\">\n              {comments && comments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n            )}\n          </section>\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                loadComments={loadComments}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  userId: PropTypes.number.isRequired,\n  post: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ])).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/api';\nimport { getAllPosts } from './api/posts';\n\nexport const App = () => {\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState([]);\n  const [userSelect, setUserSelect] = useState('0');\n  const [posts, setPosts] = useState([]);\n  const [filterPosts, setFilterPosts] = useState(posts);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then((people) => {\n        setUsers(people\n          .filter(person => person.id < 10)\n          .sort((a, b) => a.id - b.id));\n      });\n\n    getAllPosts()\n      .then((post) => {\n        setPosts(post);\n        setFilterPosts(post);\n      });\n  }, []);\n\n  const selectUserId = useCallback((numberID, person) => {\n    setUserId(numberID);\n    setUser(person);\n  }, []);\n\n  const filterByPosts = (number) => {\n    if (number === '0') {\n      setFilterPosts(posts.map(post => post));\n\n      return;\n    }\n\n    setFilterPosts(posts.filter(post => +post.userId === +number));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            name=\"user\"\n            value={userSelect}\n            onChange={({ target }) => {\n              setUserSelect(target.value);\n              filterByPosts(target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(person => (\n              <option\n                key={person.id}\n                value={person.id}\n              >\n                {person.name}\n              </option>\n            ))}\n\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            filterPosts={filterPosts}\n            selectUserId={selectUserId}\n            userId={userId}\n          />\n        </div>\n        {userId !== 0 && (\n        <div className=\"App__content\">\n          <PostDetails\n            userId={userId}\n            post={user}\n          />\n        </div>\n        )}\n      </main>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getAllPosts = () => request('/posts');\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}