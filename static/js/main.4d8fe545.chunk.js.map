{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","components/Header/Header.jsx","App.jsx","api/posts.js","index.js"],"names":["PostsList","React","memo","filterPosts","selectUserId","userId","className","length","map","post","key","id","title","type","onClick","propTypes","PropTypes","arrayOf","shape","number","isRequired","string","func","NewCommentForm","loadComments","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","handleChange","target","name","value","onSubmit","event","preventDefault","placeholder","onChange","required","Loader","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","addPostComment","email","body","method","JSON","stringify","PostDetails","comments","setComments","visible","setVisible","useEffect","coment","useCallback","deleteComment","deletePostComment","comment","Header","filterByPosts","setUserSelect","userSelect","users","person","App","setUsers","user","setUser","posts","setPosts","setFilterPosts","setUserId","people","filter","sort","a","b","numberID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d8fe545.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = React.memo(\n  ({ filterPosts, selectUserId, userId }) => (\n    <div className=\"PostsList\">\n      <h2>{`Posts: ${filterPosts.length}`}</h2>\n\n      <ul className=\"PostsList__list\">\n        {filterPosts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User: ${post.userId}]`}\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectUserId(post.id === userId ? 0 : post.id, post);\n              }}\n            >\n              {(userId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  ),\n);\n\nPostsList.propTypes = {\n  filterPosts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string || null.isRequired,\n    userId: PropTypes.number || null.isRequired,\n  })).isRequired,\n  selectUserId: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = React.memo(\n  ({ loadComments }) => {\n    const [newName, setNewName] = useState('');\n    const [newEmail, setNewEmail] = useState('');\n    const [newBody, setNewBody] = useState('');\n\n    const handleChange = ({ target }) => {\n      const { name, value } = target;\n\n      // eslint-disable-next-line default-case\n      switch (name) {\n        case 'name':\n          setNewName(value);\n          break;\n        case 'email':\n          setNewEmail(value);\n          break;\n        case 'body':\n          setNewBody(value);\n          break;\n      }\n    };\n\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      loadComments(newName, newEmail, newBody);\n      setNewName('');\n      setNewEmail('');\n      setNewBody('');\n    };\n\n    return (\n      <form\n        onSubmit={handleSubmit}\n        className=\"NewCommentForm\"\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={newName}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={newEmail}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={newBody}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  },\n);\n\nNewCommentForm.propTypes = {\n  loadComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getUsers = () => request(`/users`);\n","import { request, BASE_URL } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nconst post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const addPostComment = ({\n  userId,\n  newName,\n  newEmail,\n  newBody,\n}) => post('/comments', {\n  postId: userId,\n  name: newName,\n  email: newEmail,\n  body: newBody,\n});\n\nexport const deletePostComment = postId => fetch(\n  `${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  },\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader/Loader';\nimport {\n  getPostComments,\n  deletePostComment,\n  addPostComment,\n} from '../../api/comments';\n\nexport const PostDetails = ({ userId, post }) => {\n  const [comments, setComments] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    getPostComments(userId)\n      .then((coment) => {\n        setComments(coment);\n      });\n  }, [userId]);\n\n  const loadComments = useCallback((newName, newEmail, newBody) => {\n    addPostComment({\n      userId,\n      newName,\n      newEmail,\n      newBody,\n    })\n      .then(() => getPostComments(userId))\n      .then(setComments);\n  }, [userId]);\n\n  const deleteComment = (postId) => {\n    deletePostComment(postId)\n      .then(() => getPostComments(userId))\n      .then(setComments);\n  };\n\n  if (!post) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button PostDetails__button\"\n          onClick={() => {\n            setVisible(!visible);\n          }}\n        >\n          {`Hide ${comments.length} comments`}\n        </button>\n        {visible && (\n        <ul className=\"PostDetails__list\">\n          {comments && comments.map(comment => (\n            <li key={comment.id} className=\"PostDetails__list-item\">\n              <button\n                onClick={() => {\n                  deleteComment(comment.id);\n                }}\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            loadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  userId: PropTypes.number.isRequired,\n  post: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ])).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Header = ({\n  filterByPosts,\n  setUserSelect,\n  userSelect,\n  users,\n}) => (\n  <header className=\"App__header\">\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        name=\"user\"\n        value={userSelect}\n        onChange={({ target }) => {\n          setUserSelect(target.value);\n          filterByPosts(target.value);\n        }}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(person => (\n          <option\n            key={person.id}\n            value={person.id}\n          >\n            {person.name}\n          </option>\n        ))}\n\n      </select>\n    </label>\n  </header>\n);\n\nHeader.propTypes = {\n  filterByPosts: PropTypes.func.isRequired,\n  setUserSelect: PropTypes.func.isRequired,\n  userSelect: PropTypes.number.isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  })).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Header } from './components/Header/Header';\nimport { getUsers } from './api/api';\nimport { getAllPosts } from './api/posts';\n\nexport const App = () => {\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState([]);\n  const [userSelect, setUserSelect] = useState(0);\n  const [posts, setPosts] = useState([]);\n  const [filterPosts, setFilterPosts] = useState(posts);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then((people) => {\n        setUsers(people\n          .filter(person => person.id < 10)\n          .sort((a, b) => a.id - b.id));\n      });\n\n    getAllPosts()\n      .then((post) => {\n        setPosts(post);\n        setFilterPosts(post);\n      });\n  }, []);\n\n  const selectUserId = useCallback((numberID, person) => {\n    setUserId(numberID);\n    setUser(person);\n  }, []);\n\n  const filterByPosts = useCallback((number) => {\n    if (number === '0') {\n      setFilterPosts(posts.map(post => post));\n\n      return;\n    }\n\n    setFilterPosts(posts.filter(post => +post.userId === +number));\n  }, [filterPosts]);\n\n  return (\n    <div className=\"App\">\n      <Header\n        filterByPosts={filterByPosts}\n        setUserSelect={setUserSelect}\n        userSelect={userSelect}\n        users={users}\n      />\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            filterPosts={filterPosts}\n            selectUserId={selectUserId}\n            userId={userId}\n          />\n        </div>\n        {userId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              userId={userId}\n              post={user}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getAllPosts = () => request('/posts');\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}